name: "Bundle and Release Ruby Gem"
description: "Release Ruby Gem using Bundler"
branding:
  color: "orange"
  icon: "upload-cloud"
inputs:
  git-remote:
    description: "git remote name"
    required: true
    default: "origin"
  git-release-branch-prefix:
    description: "git release branch prefix"
    required: true
    default: "releases"
  release-await:
    description: "enable gem availability polling on RubyGems.org"
    required: true
    default: "false"
  release-trusted:
    description: "enable trusted publsher method"
    required: true
    default: "true"
outputs:
  gem-version:
    description: "Gem version"
    value: ${{ steps.release-info.outputs.GEM_VERSION }}
  git-tag-version:
    description: "Git tag version"
    value: ${{ steps.release-info.outputs.GIT_TAG_VERSION }}
  git-release-branch:
    description: "Git release branch name"
    value: ${{ steps.release-info.outputs.GIT_RELEASE_BRANCH }}
runs:
  using: "composite"
  steps:
    - name: Examine gemspec
      id: release-info
      shell: bash
      env:
        BRANCH_PREFIX: ${{ inputs.git-release-branch-prefix }}
      run: |
        gem_version=$(ruby -rbundler -e "puts Bundler::GemHelper.new.send(:version)")
        git_tag_version=$(ruby -rbundler -e "puts Bundler::GemHelper.new.send(:version_tag)")
        echo "GEM_VERSION=$gem_version" >> "$GITHUB_OUTPUT"
        echo "GIT_TAG_VERSION=$git_tag_version" >> "$GITHUB_OUTPUT"
        echo "GIT_RELEASE_BRANCH=$BRANCH_PREFIX/$GIT_TAG_VERSION" >> "$GITHUB_OUTPUT"

    - name: Checkout new release branch
      shell: bash
      env:
        BRANCH: ${{ steps.release-info.outputs.GIT_RELEASE_BRANCH }}
      run: |
        git checkout -b $BRANCH

    - name: Release Gem
      uses: rubygems/release-gem@v1
      with:
        await-release: ${{ inputs.release-await }}
        setup-trusted-publisher: ${{ inputs.release-trusted }}

    - name: Determine release branch
      id: release-branch
      shell: bash
      env:
        REMOTE: ${{ inputs.git-remote }}
        BRANCH: ${{ steps.release-info.outputs.GIT_RELEASE_BRANCH }}
      if: always()
      run: |
        release_branch=$(git ls-remote --heads $REMOTE refs/heads/$BRANCH)
        if [[ -n $release_branch ]]; then
          echo "Release branch $BRANCH existed in remote $REMOTE"
          echo "BRANCH_EXISTS=true" >> "$GITHUB_OUTPUT"
        else
          echo "Release branch $BRANCH does not exist in remote $REMOTE"
          echo "BRANCH_EXISTS=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Clean up release branch
      shell: bash
      env:
        REMOTE: ${{ inputs.git-remote }}
        BRANCH: ${{ steps.release-info.outputs.GIT_RELEASE_BRANCH }}
      if: ${{ steps.release-branch.outputs.BRANCH_EXISTS == 'true' }}
      run: |
        git push -d $REMOTE refs/heads/$BRANCH
